{"version":3,"sources":["redux/contact-form/contact-form-actions.js","redux/contact-form/contact-form-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contact-form/contact-form-reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","name","number","payload","id","shortid","generate","removeContact","changeFilter","getFilter","state","contacts","filter","getVisibleContacts","items","getContacts","normalizedFilter","toLowerCase","contact","includes","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","nameInputId","numberInputId","handleChangeForm","e","target","value","resetForm","onSubmit","preventDefault","find","alert","trim","contactFormActions","type","placeholder","onChange","pattern","title","ContactListItem","onRemove","onClick","ContactsList","length","map","Filter","App","createReducer","actions","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactFormReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.68696d9a.chunk.js","sourcesContent":["import shortid from 'shortid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contact-form/Add', ({ name, number }) => ({\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n}));\n\nconst removeContact = createAction('contact-form/Remove');\n\nconst changeFilter = createAction('contact-form/changeFilter');\n\nexport default { addContact, removeContact, changeFilter };\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactFormActions from '../../redux/contact-form/contact-form-actions';\nimport { getVisibleContacts } from '../../redux/contact-form/contact-form-selectors';\nimport PropTypes from 'prop-types';\n\nimport shortid from 'shortid';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  const handleChangeForm = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n\n    if (contacts.find(contact => contact.name === e.target.name.value)) {\n      alert(`${e.target.name.value} is already in contacts`);\n      return;\n    }\n\n    if (contacts.find(contact => contact.number === e.target.number.value)) {\n      alert(`Number ${e.target.number.value} is already in contacts`);\n      return;\n    }\n\n    if ((!name || name.trim() === '') && (!number || number.trim() === '')) {\n      alert('Fill in the fields \"Name\" and \"Number\"');\n      return;\n    }\n\n    if (!name || name.trim() === '') {\n      alert('Field \"Name\" is empty');\n      return;\n    }\n\n    if (!number || number.trim() === '') {\n      alert('Field \"Number\" is empty');\n      return;\n    }\n\n    dispatch(contactFormActions.addContact({ name, number }));\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmitForm}>\n      <input\n        id={nameInputId}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Enter name\"\n        value={name}\n        onChange={handleChangeForm}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      />\n      <input\n        id={numberInputId}\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Enter phone number\"\n        value={number}\n        onChange={handleChangeForm}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n      />\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport contactFormActions from '../../redux/contact-form/contact-form-actions.js';\nimport { getVisibleContacts } from '../../redux/contact-form/contact-form-selectors.js';\n\nconst ContactListItem = ({ id, name, number, onRemove }) => {\n  return (\n    <li>\n      {name}: {number} <button onClick={() => onRemove(id)}>delete</button>\n    </li>\n  );\n};\n\nconst ContactsList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const onRemove = id => dispatch(contactFormActions.removeContact(id));\n\n  if (contacts.length === 0) return <p>There are no contacts in the list</p>;\n\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          name={name}\n          number={number}\n          onRemove={() => onRemove(id)}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactsList;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/contact-form/contact-form-selectors';\nimport contactFormActions from '../../redux/contact-form/contact-form-actions';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <input\n      type=\"text\"\n      name=\"filter\"\n      value={value}\n      onChange={e => dispatch(contactFormActions.changeFilter(e.target.value))}\n      placeholder=\"Enter name for Search\"\n    />\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport ContactForm from './components/ContactForm';\nimport ContactsList from './components/ContactList';\nimport Filter from './components/Filter';\n\nconst App = () => {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n\n      <ContactsList />\n    </>\n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './contact-form-actions';\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.removeContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport contactFormReducer from './contact-form/contact-form-reducer';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst middleware = getDefaultMiddleware => [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactFormReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}